:mod:`AFQ`
==========

.. py:module:: AFQ


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   models/index.rst
   utils/index.rst
   viz/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   api/index.rst
   bundles/index.rst
   data/index.rst
   mask/index.rst
   registration/index.rst
   segmentation/index.rst
   tractography/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   AFQ.AFQ



Functions
~~~~~~~~~

.. autoapisummary::

   AFQ.read_callosum_templates
   AFQ.read_templates
   AFQ.fetch_hcp
   AFQ.read_stanford_hardi_tractography
   AFQ.organize_stanford_data
   AFQ.make_bundle_dict


.. data:: fetch_callosum_templates
   

   

.. function:: read_callosum_templates(resample_to=False)

   Load AFQ callosum templates from file



   :Returns:

       dict with: keys: names of template ROIs and values: nibabel Nifti1Image
           ..

       objects from each of the ROI nifti files.
           ..













   ..
       !! processed by numpydoc !!


.. data:: fetch_templates
   

   

.. function:: read_templates(resample_to=False)

   Load AFQ templates from file



   :Returns:

       dict with: keys: names of template ROIs and values: nibabel Nifti1Image
           ..

       objects from each of the ROI nifti files.
           ..













   ..
       !! processed by numpydoc !!


.. function:: fetch_hcp(subjects, hcp_bucket='hcp-openaccess', profile_name='hcp', path=None, study='HCP_1200', aws_access_key_id=None, aws_secret_access_key=None)

   Fetch HCP diffusion data and arrange it in a manner that resembles the
   BIDS [R8494a6c36190-1]_ specification.


   :Parameters:

       **subjects** : list
           Each item is an integer, identifying one of the HCP subjects

       **hcp_bucket** : string, optional
           The name of the HCP S3 bucket. Default: "hcp-openaccess"

       **profile_name** : string, optional
           The name of the AWS profile used for access. Default: "hcp"

       **path** : string, optional
           Path to save files into. Default: '~/AFQ_data'

       **study** : string, optional
           Which HCP study to grab. Default: 'HCP_1200'

       **aws_access_key_id** : string, optional
           AWS credentials to HCP AWS S3. Will only be used if `profile_name` is
           set to False.

       **aws_secret_access_key** : string, optional
           AWS credentials to HCP AWS S3. Will only be used if `profile_name` is
           set to False.

   :Returns:

       dict with remote and local names of these files,
           ..

       path to BIDS derivative dataset
           ..








   .. rubric:: Notes

   To use this function with its default setting, you need to have a
   file '~/.aws/credentials', that includes a section:

   [hcp]
   AWS_ACCESS_KEY_ID=XXXXXXXXXXXXXXXX
   AWS_SECRET_ACCESS_KEY=XXXXXXXXXXXXXXXX

   The keys are credentials that you can get from HCP
   (see https://wiki.humanconnectome.org/display/PublicData/How+To+Connect+to+Connectome+Data+via+AWS)  # noqa

   Local filenames are changed to match our expected conventions.

   .. [R8494a6c36190-1] Gorgolewski et al. (2016). The brain imaging data structure,
          a format for organizing and describing outputs of neuroimaging
          experiments. Scientific Data, 3::160044. DOI: 10.1038/sdata.2016.44.





   ..
       !! processed by numpydoc !!


.. data:: fetch_stanford_hardi_tractography
   

   

.. function:: read_stanford_hardi_tractography()

   Reads a minimal tractography from the Stanford dataset.
















   ..
       !! processed by numpydoc !!


.. function:: organize_stanford_data(path=None)

   Create the expected file-system structure for the Stanford HARDI data-set.
















   ..
       !! processed by numpydoc !!


.. py:class:: AFQ(bids_path, bids_filters={'suffix': 'dwi'}, dmriprep='all', b0_threshold=50, min_bval=None, max_bval=None, reg_template='mni_T1', reg_subject='power_map', brain_mask=B0Mask(), bundle_names=BUNDLES, dask_it=False, force_recompute=False, scalars=['dti_fa', 'dti_md'], use_prealign=True, virtual_frame_buffer=False, viz_backend='fury', tracking_params=None, segmentation_params=None, clean_params=None)

   Bases: :class:`object`

   ..
       !! processed by numpydoc !!

   .. attribute:: _scalar_dict
      

      

   .. attribute:: gtab
      

      

   .. attribute:: dwi_affine
      

      

   .. attribute:: dwi_img
      

      

   .. attribute:: b0
      

      

   .. attribute:: brain_mask
      

      

   .. attribute:: dti
      

      

   .. attribute:: dti_fa
      

      

   .. attribute:: dti_cfa
      

      

   .. attribute:: dti_pdd
      

      

   .. attribute:: dti_md
      

      

   .. attribute:: dki
      

      

   .. attribute:: dki_fa
      

      

   .. attribute:: dki_md
      

      

   .. attribute:: mapping
      

      

   .. attribute:: streamlines
      

      

   .. attribute:: bundles
      

      

   .. attribute:: clean_bundles
      

      

   .. attribute:: tract_profiles
      

      

   .. attribute:: template_xform
      

      

   .. method:: log_and_save_nii(self, img, fname)


   .. method:: log_and_save_trk(self, sft, fname)


   .. method:: _get_data_gtab(self, row, filter_b=True)


   .. method:: _b0(self, row)


   .. method:: _brain_mask(self, row, median_radius=4, numpass=1, autocrop=False, vol_idx=None, dilate=10)


   .. method:: _dti_fit(self, row)


   .. method:: _dti(self, row)


   .. method:: _dki_fit(self, row)


   .. method:: _dki(self, row)


   .. method:: _csd(self, row, response=None, sh_order=None, lambda_=1, tau=0.1)


   .. method:: _anisotropic_power_map(self, row)


   .. method:: _dti_fa(self, row)


   .. method:: _dti_cfa(self, row)


   .. method:: _dti_pdd(self, row)


   .. method:: _dti_md(self, row)


   .. method:: _dki_fa(self, row)


   .. method:: _dki_md(self, row)


   .. method:: _get_best_scalar(self)


   .. method:: _reg_img(self, img, row=None)


   .. method:: _reg_prealign(self, row)


   .. method:: _export_registered_b0(self, row)


   .. method:: _mapping(self, row)


   .. method:: _streamlines(self, row)


   .. method:: _segment(self, row)


   .. method:: _clean_bundles(self, row)


   .. method:: _tract_profiles(self, row)


   .. method:: _template_xform(self, row)


   .. method:: _export_rois(self, row)


   .. method:: _export_bundles(self, row)


   .. method:: _viz_prepare_vols(self, row, volume=None, xform_volume=False, color_by_volume=None, xform_color_by_volume=False)


   .. method:: _viz_bundles(self, row, export=False, inline=False, interactive=False, volume=None, xform_volume=False, color_by_volume=None, xform_color_by_volume=False, n_points=None)


   .. method:: _viz_ROIs(self, row, bundle_names=None, export=False, inline=False, interactive=False, volume=None, xform_volume=False, color_by_volume=None, xform_color_by_volume=False, n_points=None)


   .. method:: _plot_tract_profiles(self, row)


   .. method:: _export_timing(self, row)


   .. method:: _get_affine(self, fname)


   .. method:: _get_fname(self, row, suffix, include_track=False, include_seg=False)


   .. method:: set_gtab(self, b0_threshold)


   .. method:: get_gtab(self)


   .. method:: set_dwi_affine(self)


   .. method:: get_dwi_affine(self)


   .. method:: set_dwi_img(self)


   .. method:: get_dwi_img(self)


   .. method:: __getitem__(self, k)


   .. method:: set_b0(self)


   .. method:: get_b0(self)


   .. method:: set_brain_mask(self)


   .. method:: get_brain_mask(self)


   .. method:: set_dti(self)


   .. method:: get_dti(self)


   .. method:: set_dti_fa(self)


   .. method:: get_dti_fa(self)


   .. method:: set_dti_cfa(self)


   .. method:: get_dti_cfa(self)


   .. method:: set_dti_pdd(self)


   .. method:: get_dti_pdd(self)


   .. method:: set_dti_md(self)


   .. method:: get_dti_md(self)


   .. method:: set_dki(self)


   .. method:: get_dki(self)


   .. method:: set_dki_fa(self)


   .. method:: get_dki_fa(self)


   .. method:: set_dki_md(self)


   .. method:: get_dki_md(self)


   .. method:: set_mapping(self)


   .. method:: get_mapping(self)


   .. method:: set_streamlines(self)


   .. method:: get_streamlines(self)


   .. method:: set_bundles(self)


   .. method:: get_bundles(self)


   .. method:: set_clean_bundles(self)


   .. method:: get_clean_bundles(self)


   .. method:: set_tract_profiles(self)


   .. method:: get_tract_profiles(self)


   .. method:: set_template_xform(self)


   .. method:: get_template_xform(self)


   .. method:: export_rois(self)


   .. method:: export_bundles(self)


   .. method:: viz_bundles(self, export=False, volume=None, xform_volume=False, color_by_volume=None, xform_color_by_volume=False, n_points=None, inline=False, interactive=False)


   .. method:: viz_ROIs(self, bundle_names=None, export=False, volume=None, xform_volume=False, color_by_volume=None, xform_color_by_volume=False, n_points=None, inline=False, interactive=False)


   .. method:: plot_tract_profiles(self)


   .. method:: export_registered_b0(self)


   .. method:: combine_profiles(self)


   .. method:: export_timing(self)


   .. method:: export_all(self)

      Exports all the possible outputs
















      ..
          !! processed by numpydoc !!


   .. method:: upload_to_s3(self, s3fs, remote_path)

      Upload entire AFQ derivatives folder to S3
















      ..
          !! processed by numpydoc !!



.. function:: make_bundle_dict(bundle_names=BUNDLES, seg_algo='afq', resample_to=False)

   Create a bundle dictionary, needed for the segmentation


   :Parameters:

       **bundle_names** : list, optional
           A list of the bundles to be used in this case. Default: all of them

       **resample_to** : Nifti1Image, optional
           If set, templates will be resampled to the affine and shape of this
           image.














   ..
       !! processed by numpydoc !!


.. data:: _ga_id
   :annotation: = UA-156363454-3

   

