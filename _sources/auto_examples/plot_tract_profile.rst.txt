.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_tract_profile.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_tract_profile.py:


==========================
Plotting tract profiles
==========================

An example of tracking and segmenting two tracts, and plotting their tract
profiles for FA (calculated with DTI). This example uses the Yeatman et al.
waypoint ROI approach, first described in [Yeatman2012]_ and further elaborated
in [Yeatman2014]_.


.. code-block:: default

    import os.path as op
    import matplotlib.pyplot as plt
    import numpy as np
    import nibabel as nib
    import dipy.data as dpd
    from dipy.data import fetcher
    from dipy.io.streamline import save_tractogram, load_tractogram
    from dipy.stats.analysis import afq_profile, gaussian_weights
    from dipy.io.stateful_tractogram import StatefulTractogram
    from dipy.io.stateful_tractogram import Space

    from AFQ import api
    import AFQ.data as afd
    import AFQ.tractography as aft
    import AFQ.registration as reg
    import AFQ.models.dti as dti
    import AFQ.segmentation as seg
    from AFQ.utils.volume import patch_up_roi

    import logging
    logging.basicConfig(level=logging.INFO)









Get example data:
-------------------------


.. code-block:: default


    dpd.fetch_stanford_hardi()
    hardi_dir = op.join(fetcher.dipy_home, "stanford_hardi")
    hardi_fdata = op.join(hardi_dir, "HARDI150.nii.gz")
    hardi_fbval = op.join(hardi_dir, "HARDI150.bval")
    hardi_fbvec = op.join(hardi_dir, "HARDI150.bvec")
    img = nib.load(hardi_fdata)








Calculate DTI:
-------------------------


.. code-block:: default


    print("Calculating DTI...")
    if not op.exists('./dti_FA.nii.gz'):
        dti_params = dti.fit_dti(hardi_fdata, hardi_fbval, hardi_fbvec,
                                 out_dir='.')
    else:
        dti_params = {'FA': './dti_FA.nii.gz',
                      'params': './dti_params.nii.gz'}

    FA_img = nib.load(dti_params['FA'])
    FA_data = FA_img.get_fdata()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Calculating DTI...




Register the individual data to a template:
-------------------------------------------
For the purpose of bundle segmentation, the individual brain is registered
to the MNI T2 template. The waypoint ROIs used in segmentation are then each
brought into each subject's native space to test streamlines for whether they
fulfill the segmentation criteria.

.. note::
    Here, we calculate just a non-linear transformation between the
    individual's brain and the MNI T2 template. In practice, it's a good idea
    to also perform a pre-alignment using an affine transformation. We don't
    do that here, but this is part of the full pipeline implemented in the
    CLI.



.. code-block:: default

    print("Registering to template...")
    MNI_T2_img = afd.read_mni_template()
    if not op.exists('mapping.nii.gz'):
        import dipy.core.gradients as dpg
        gtab = dpg.gradient_table(hardi_fbval, hardi_fbvec)

        warped_hardi, mapping = reg.syn_register_dwi(hardi_fdata, gtab)
        reg.write_mapping(mapping, './mapping.nii.gz')
    else:
        mapping = reg.read_mapping('./mapping.nii.gz', img, MNI_T2_img)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Registering to template...
    Downloading https://templateflow.s3.amazonaws.com/tpl-MNI152NLin2009cAsym/tpl-MNI152NLin2009cAsym_res-01_T2w.nii.gz
      0%|          | 0.00/13.0k [00:00<?, ?B/s]     55%|#####4    | 7.10k/13.0k [00:00<00:00, 71.0kB/s]    13.0kB [00:00, 83.5kB/s]                            




Read in bundle specification
-------------------------------------------
The waypoint ROIs, in addition to bundle probability maps are stored in this
data structure. The templates are first resampled into the MNI space, before
they are brought into the subject's individual native space.
For speed, we only segment two bundles here.


.. code-block:: default


    bundles = api.make_bundle_dict(bundle_names=["CST", "ARC"],
                                   resample_to=MNI_T2_img)









Tracking
--------
Streamlines are generate using DTI and a deterministic tractography
algorithm. For speed, we seed only within the waypoint ROIs for each bundle.


.. code-block:: default


    print("Tracking...")
    if not op.exists('dti_streamlines.trk'):
        seed_roi = np.zeros(img.shape[:-1])
        for bundle in bundles:
            for idx, roi in enumerate(bundles[bundle]['ROIs']):
                if bundles[bundle]['rules'][idx]:
                    warped_roi = patch_up_roi(
                        mapping.transform_inverse(
                            roi.get_fdata().astype(np.float32),
                            interpolation='linear'),
                            bundle_name=bundle)

                    nib.save(nib.Nifti1Image(warped_roi.astype(float), img.affine),
                             f"{bundle}_{idx+1}.nii.gz")
                    # Add voxels that aren't there yet:
                    seed_roi = np.logical_or(seed_roi, warped_roi)
        nib.save(nib.Nifti1Image(seed_roi.astype(float), img.affine),
                                 'seed_roi.nii.gz')
        sft = aft.track(dti_params['params'], seed_mask=seed_roi,
                        stop_mask=FA_data, stop_threshold=0.1)
        save_tractogram(sft, './dti_streamlines.trk',
                        bbox_valid_check=False)
    else:
        sft = load_tractogram('./dti_streamlines.trk', img)

    sft.to_vox()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Tracking...
      0%|          | 0/100 [00:00<?, ?it/s]      1%|1         | 1/100 [00:00<00:26,  3.75it/s]      2%|2         | 2/100 [00:00<00:25,  3.80it/s]      3%|3         | 3/100 [00:00<00:25,  3.79it/s]      4%|4         | 4/100 [00:01<00:25,  3.81it/s]      5%|5         | 5/100 [00:01<00:25,  3.79it/s]      6%|6         | 6/100 [00:01<00:24,  3.78it/s]      7%|7         | 7/100 [00:01<00:24,  3.73it/s]      8%|8         | 8/100 [00:02<00:24,  3.81it/s]      9%|9         | 9/100 [00:02<00:23,  3.85it/s]     10%|#         | 10/100 [00:02<00:23,  3.82it/s]     11%|#1        | 11/100 [00:02<00:23,  3.83it/s]     12%|#2        | 12/100 [00:03<00:22,  3.85it/s]     13%|#3        | 13/100 [00:03<00:22,  3.88it/s]     14%|#4        | 14/100 [00:03<00:22,  3.91it/s]     15%|#5        | 15/100 [00:03<00:21,  3.90it/s]     16%|#6        | 16/100 [00:04<00:21,  3.92it/s]     17%|#7        | 17/100 [00:04<00:21,  3.91it/s]     18%|#8        | 18/100 [00:04<00:20,  3.91it/s]     19%|#9        | 19/100 [00:04<00:20,  3.91it/s]     20%|##        | 20/100 [00:05<00:20,  3.93it/s]     21%|##1       | 21/100 [00:05<00:20,  3.93it/s]     22%|##2       | 22/100 [00:05<00:19,  3.90it/s]     23%|##3       | 23/100 [00:05<00:19,  3.88it/s]     24%|##4       | 24/100 [00:06<00:19,  3.88it/s]     25%|##5       | 25/100 [00:06<00:19,  3.86it/s]     26%|##6       | 26/100 [00:06<00:19,  3.87it/s]     27%|##7       | 27/100 [00:06<00:19,  3.82it/s]     28%|##8       | 28/100 [00:07<00:18,  3.86it/s]     29%|##9       | 29/100 [00:07<00:18,  3.87it/s]     30%|###       | 30/100 [00:07<00:17,  3.89it/s]     31%|###1      | 31/100 [00:08<00:17,  3.87it/s]     32%|###2      | 32/100 [00:08<00:17,  3.89it/s]     33%|###3      | 33/100 [00:08<00:17,  3.87it/s]     34%|###4      | 34/100 [00:08<00:16,  3.89it/s]     35%|###5      | 35/100 [00:09<00:16,  3.89it/s]     36%|###6      | 36/100 [00:09<00:16,  3.91it/s]     37%|###7      | 37/100 [00:09<00:16,  3.90it/s]     38%|###8      | 38/100 [00:09<00:15,  3.90it/s]     39%|###9      | 39/100 [00:10<00:15,  3.84it/s]     40%|####      | 40/100 [00:10<00:15,  3.86it/s]     41%|####1     | 41/100 [00:10<00:15,  3.90it/s]     42%|####2     | 42/100 [00:10<00:14,  3.92it/s]     43%|####3     | 43/100 [00:11<00:14,  3.87it/s]     44%|####4     | 44/100 [00:11<00:14,  3.86it/s]     45%|####5     | 45/100 [00:11<00:14,  3.88it/s]     46%|####6     | 46/100 [00:11<00:14,  3.86it/s]     47%|####6     | 47/100 [00:12<00:13,  3.83it/s]     48%|####8     | 48/100 [00:12<00:13,  3.84it/s]     49%|####9     | 49/100 [00:12<00:13,  3.86it/s]     50%|#####     | 50/100 [00:12<00:13,  3.84it/s]     51%|#####1    | 51/100 [00:13<00:12,  3.83it/s]     52%|#####2    | 52/100 [00:13<00:12,  3.84it/s]     53%|#####3    | 53/100 [00:13<00:12,  3.91it/s]     54%|#####4    | 54/100 [00:13<00:11,  3.93it/s]     55%|#####5    | 55/100 [00:14<00:11,  3.93it/s]     56%|#####6    | 56/100 [00:14<00:11,  3.93it/s]     57%|#####6    | 57/100 [00:14<00:10,  3.93it/s]     58%|#####8    | 58/100 [00:14<00:10,  3.92it/s]     59%|#####8    | 59/100 [00:15<00:10,  3.89it/s]     60%|######    | 60/100 [00:15<00:10,  3.88it/s]     61%|######1   | 61/100 [00:15<00:09,  3.91it/s]     62%|######2   | 62/100 [00:16<00:09,  3.90it/s]     63%|######3   | 63/100 [00:16<00:09,  3.92it/s]     64%|######4   | 64/100 [00:16<00:09,  3.90it/s]     65%|######5   | 65/100 [00:16<00:08,  3.92it/s]     66%|######6   | 66/100 [00:17<00:08,  3.88it/s]     67%|######7   | 67/100 [00:17<00:08,  3.93it/s]     68%|######8   | 68/100 [00:17<00:08,  3.96it/s]     69%|######9   | 69/100 [00:17<00:07,  3.97it/s]     70%|#######   | 70/100 [00:18<00:07,  3.95it/s]     71%|#######1  | 71/100 [00:18<00:07,  3.99it/s]     72%|#######2  | 72/100 [00:18<00:07,  3.99it/s]     73%|#######3  | 73/100 [00:18<00:06,  3.98it/s]     74%|#######4  | 74/100 [00:19<00:06,  3.92it/s]     75%|#######5  | 75/100 [00:19<00:06,  3.94it/s]     76%|#######6  | 76/100 [00:19<00:06,  3.95it/s]     77%|#######7  | 77/100 [00:19<00:05,  3.95it/s]     78%|#######8  | 78/100 [00:20<00:05,  3.89it/s]     79%|#######9  | 79/100 [00:20<00:05,  3.92it/s]     80%|########  | 80/100 [00:20<00:05,  3.93it/s]     81%|########1 | 81/100 [00:20<00:04,  3.95it/s]     82%|########2 | 82/100 [00:21<00:04,  3.93it/s]     83%|########2 | 83/100 [00:21<00:04,  3.95it/s]     84%|########4 | 84/100 [00:21<00:04,  3.94it/s]     85%|########5 | 85/100 [00:21<00:03,  3.96it/s]     86%|########6 | 86/100 [00:22<00:03,  3.96it/s]     87%|########7 | 87/100 [00:22<00:03,  3.98it/s]     88%|########8 | 88/100 [00:22<00:03,  3.97it/s]     89%|########9 | 89/100 [00:22<00:02,  3.95it/s]     90%|######### | 90/100 [00:23<00:02,  3.94it/s]     91%|#########1| 91/100 [00:23<00:01,  4.56it/s]     94%|#########3| 94/100 [00:23<00:00,  6.11it/s]     98%|#########8| 98/100 [00:23<00:00,  8.05it/s]    100%|##########| 100/100 [00:23<00:00,  4.25it/s]
      0%|          | 0/5747 [00:00<?, ?it/s]      3%|2         | 148/5747 [00:00<00:03, 1474.39it/s]      4%|4         | 246/5747 [00:00<00:04, 1279.13it/s]      6%|5         | 338/5747 [00:00<00:04, 1139.76it/s]      7%|7         | 427/5747 [00:00<00:05, 1045.78it/s]      9%|9         | 531/5747 [00:00<00:05, 1038.60it/s]     11%|#         | 615/5747 [00:00<00:05, 881.23it/s]      12%|#2        | 693/5747 [00:00<00:06, 722.06it/s]     13%|#3        | 763/5747 [00:00<00:08, 569.23it/s]     14%|#4        | 832/5747 [00:01<00:08, 589.44it/s]     16%|#5        | 894/5747 [00:01<00:09, 512.09it/s]     17%|#6        | 949/5747 [00:01<00:11, 428.49it/s]     17%|#7        | 1004/5747 [00:01<00:10, 458.37it/s]     18%|#8        | 1054/5747 [00:01<00:12, 368.43it/s]     19%|#9        | 1102/5747 [00:01<00:11, 394.61it/s]     20%|##        | 1161/5747 [00:01<00:10, 434.91it/s]     21%|##1       | 1209/5747 [00:02<00:10, 416.12it/s]     22%|##1       | 1254/5747 [00:02<00:11, 384.74it/s]     23%|##2       | 1296/5747 [00:02<00:11, 378.16it/s]     23%|##3       | 1336/5747 [00:02<00:12, 365.31it/s]     24%|##3       | 1374/5747 [00:02<00:12, 341.76it/s]     25%|##4       | 1418/5747 [00:02<00:11, 362.92it/s]     25%|##5       | 1456/5747 [00:02<00:13, 322.44it/s]     26%|##6       | 1501/5747 [00:02<00:12, 351.17it/s]     27%|##6       | 1539/5747 [00:03<00:15, 278.78it/s]     28%|##7       | 1586/5747 [00:03<00:13, 317.38it/s]     28%|##8       | 1623/5747 [00:03<00:13, 306.79it/s]     29%|##8       | 1666/5747 [00:03<00:12, 335.42it/s]     30%|##9       | 1703/5747 [00:03<00:12, 327.14it/s]     30%|###       | 1740/5747 [00:03<00:11, 338.78it/s]     31%|###       | 1777/5747 [00:03<00:11, 345.98it/s]     32%|###1      | 1815/5747 [00:03<00:11, 353.59it/s]     32%|###2      | 1852/5747 [00:03<00:11, 341.19it/s]     33%|###2      | 1889/5747 [00:04<00:11, 348.85it/s]     33%|###3      | 1925/5747 [00:04<00:11, 341.48it/s]     34%|###4      | 1960/5747 [00:04<00:11, 321.07it/s]     35%|###4      | 2009/5747 [00:04<00:10, 356.15it/s]     36%|###5      | 2047/5747 [00:04<00:11, 314.36it/s]     36%|###6      | 2081/5747 [00:04<00:11, 315.30it/s]     37%|###6      | 2124/5747 [00:04<00:10, 341.85it/s]     38%|###7      | 2160/5747 [00:04<00:12, 297.29it/s]     39%|###8      | 2214/5747 [00:05<00:10, 343.30it/s]     39%|###9      | 2253/5747 [00:05<00:11, 294.59it/s]     40%|###9      | 2293/5747 [00:05<00:10, 318.74it/s]     41%|####      | 2334/5747 [00:05<00:10, 339.54it/s]     41%|####1     | 2374/5747 [00:05<00:09, 349.84it/s]     42%|####2     | 2416/5747 [00:05<00:09, 365.69it/s]     44%|####3     | 2501/5747 [00:05<00:07, 434.39it/s]     44%|####4     | 2551/5747 [00:05<00:07, 435.14it/s]     45%|####5     | 2600/5747 [00:06<00:08, 363.98it/s]     46%|####6     | 2648/5747 [00:06<00:07, 391.42it/s]     47%|####6     | 2692/5747 [00:06<00:09, 324.95it/s]     48%|####7     | 2744/5747 [00:06<00:08, 364.24it/s]     48%|####8     | 2786/5747 [00:06<00:09, 326.29it/s]     50%|####9     | 2846/5747 [00:06<00:07, 376.95it/s]     50%|#####     | 2890/5747 [00:06<00:08, 344.15it/s]     51%|#####1    | 2946/5747 [00:06<00:07, 388.99it/s]     52%|#####2    | 2991/5747 [00:07<00:07, 358.42it/s]     53%|#####2    | 3036/5747 [00:07<00:07, 379.64it/s]     54%|#####3    | 3078/5747 [00:07<00:07, 353.55it/s]     54%|#####4    | 3127/5747 [00:07<00:06, 385.54it/s]     55%|#####5    | 3169/5747 [00:07<00:07, 368.01it/s]     56%|#####6    | 3223/5747 [00:07<00:06, 404.26it/s]     57%|#####6    | 3266/5747 [00:07<00:06, 382.17it/s]     58%|#####7    | 3328/5747 [00:07<00:05, 429.60it/s]     59%|#####8    | 3375/5747 [00:08<00:05, 410.13it/s]     60%|#####9    | 3428/5747 [00:08<00:05, 424.18it/s]     60%|######    | 3473/5747 [00:08<00:06, 372.04it/s]     61%|######1   | 3519/5747 [00:08<00:05, 393.22it/s]     62%|######1   | 3561/5747 [00:08<00:05, 378.81it/s]     63%|######2   | 3601/5747 [00:08<00:05, 377.87it/s]     64%|######3   | 3654/5747 [00:08<00:05, 410.13it/s]     64%|######4   | 3697/5747 [00:08<00:05, 366.73it/s]     65%|######5   | 3747/5747 [00:08<00:05, 392.49it/s]     66%|######5   | 3792/5747 [00:09<00:04, 407.21it/s]     67%|######6   | 3835/5747 [00:09<00:05, 376.57it/s]     68%|######7   | 3885/5747 [00:09<00:04, 405.02it/s]     68%|######8   | 3928/5747 [00:09<00:05, 335.91it/s]     69%|######8   | 3965/5747 [00:09<00:05, 339.70it/s]     70%|######9   | 4015/5747 [00:09<00:04, 373.00it/s]     71%|#######   | 4055/5747 [00:09<00:05, 303.11it/s]     71%|#######1  | 4098/5747 [00:09<00:04, 332.52it/s]     72%|#######2  | 4148/5747 [00:10<00:04, 368.26it/s]     73%|#######2  | 4189/5747 [00:10<00:04, 370.63it/s]     74%|#######3  | 4241/5747 [00:10<00:03, 405.57it/s]     75%|#######4  | 4285/5747 [00:10<00:03, 399.43it/s]     75%|#######5  | 4327/5747 [00:10<00:03, 368.48it/s]     76%|#######6  | 4387/5747 [00:10<00:03, 415.44it/s]     77%|#######7  | 4432/5747 [00:10<00:03, 395.73it/s]     78%|#######8  | 4491/5747 [00:10<00:02, 438.60it/s]     79%|#######9  | 4561/5747 [00:10<00:02, 490.23it/s]     81%|########  | 4643/5747 [00:11<00:01, 556.69it/s]     82%|########1 | 4712/5747 [00:11<00:01, 590.40it/s]     84%|########3 | 4813/5747 [00:11<00:01, 672.77it/s]     85%|########5 | 4895/5747 [00:11<00:01, 707.90it/s]     87%|########6 | 4994/5747 [00:11<00:00, 772.56it/s]     89%|########8 | 5087/5747 [00:11<00:00, 812.75it/s]     90%|######### | 5180/5747 [00:11<00:00, 840.35it/s]     92%|#########1| 5272/5747 [00:11<00:00, 862.13it/s]     93%|#########3| 5362/5747 [00:11<00:00, 871.63it/s]     95%|#########5| 5478/5747 [00:11<00:00, 941.24it/s]     97%|#########7| 5575/5747 [00:12<00:00, 936.33it/s]     99%|#########8| 5685/5747 [00:12<00:00, 978.55it/s]    100%|##########| 5747/5747 [00:12<00:00, 470.28it/s]




Segmentation
--------
In this stage, streamlines are tested for several criteria: whether the
probability that they belong to a bundle is larger than a threshold (set to
0,per default), whether they pass through inclusion ROIs and whether they do
not pass through exclusion ROIs.


.. code-block:: default


    print("Segmenting fiber groups...")
    segmentation = seg.Segmentation(return_idx=True)
    segmentation.segment(bundles,
                         sft,
                         fdata=hardi_fdata,
                         fbval=hardi_fbval,
                         fbvec=hardi_fbvec,
                         mapping=mapping,
                         reg_template=MNI_T2_img)

    fiber_groups = segmentation.fiber_groups






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Segmenting fiber groups...
      0%|          | 0/1949 [00:00<?, ?it/s]     37%|###7      | 726/1949 [00:00<00:00, 7222.81it/s]     64%|######3   | 1244/1949 [00:00<00:00, 6424.87it/s]     79%|#######9  | 1549/1949 [00:00<00:00, 4141.63it/s]    100%|##########| 1949/1949 [00:00<00:00, 5015.45it/s]
      0%|          | 0/1511 [00:00<?, ?it/s]     19%|#8        | 284/1511 [00:00<00:00, 2802.01it/s]     41%|####      | 617/1511 [00:00<00:00, 2927.87it/s]     99%|#########9| 1503/1511 [00:00<00:00, 3663.10it/s]    100%|##########| 1511/1511 [00:00<00:00, 4960.84it/s]
      0%|          | 0/1959 [00:00<?, ?it/s]     16%|#5        | 304/1959 [00:00<00:00, 3030.67it/s]     27%|##6       | 526/1959 [00:00<00:00, 2718.29it/s]     33%|###3      | 656/1959 [00:00<00:01, 1209.50it/s]     39%|###8      | 763/1959 [00:00<00:01, 862.79it/s]      44%|####3     | 853/1959 [00:00<00:01, 733.48it/s]     48%|####7     | 933/1959 [00:00<00:01, 706.72it/s]     52%|#####1    | 1009/1959 [00:01<00:01, 633.95it/s]     55%|#####4    | 1077/1959 [00:01<00:01, 608.81it/s]     59%|#####9    | 1160/1959 [00:01<00:01, 660.22it/s]     63%|######2   | 1233/1959 [00:01<00:01, 675.33it/s]     67%|######7   | 1316/1959 [00:01<00:00, 714.82it/s]     72%|#######1  | 1409/1959 [00:01<00:00, 766.29it/s]     77%|#######6  | 1505/1959 [00:01<00:00, 814.40it/s]     81%|########1 | 1594/1959 [00:01<00:00, 835.14it/s]     86%|########5 | 1680/1959 [00:01<00:00, 834.21it/s]     91%|######### | 1775/1959 [00:02<00:00, 863.84it/s]     95%|#########5| 1866/1959 [00:02<00:00, 875.00it/s]    100%|##########| 1959/1959 [00:02<00:00, 886.76it/s]
      0%|          | 0/1560 [00:00<?, ?it/s]     10%|9         | 155/1560 [00:00<00:00, 1529.21it/s]     19%|#8        | 293/1560 [00:00<00:00, 1477.01it/s]     27%|##6       | 420/1560 [00:00<00:00, 1404.49it/s]     33%|###3      | 515/1560 [00:00<00:00, 1227.35it/s]     39%|###9      | 611/1560 [00:00<00:00, 1130.88it/s]     45%|####5     | 704/1560 [00:00<00:00, 936.59it/s]      51%|#####1    | 797/1560 [00:00<00:00, 934.47it/s]     57%|#####6    | 885/1560 [00:00<00:00, 910.65it/s]     63%|######3   | 986/1560 [00:00<00:00, 938.07it/s]     73%|#######3  | 1142/1560 [00:01<00:00, 1064.06it/s]    100%|##########| 1560/1560 [00:01<00:00, 1394.09it/s]




Cleaning
--------
Each fiber group is cleaned to exclude streamlines that are outliers in terms
of their trajector and/or length.


.. code-block:: default


    print("Cleaning fiber groups...")
    for bundle in bundles:
        print(f"Cleaning {bundle}")
        print(f"Before cleaning: {len(fiber_groups[bundle]['sl'])} streamlines")
        new_fibers, idx_in_bundle = seg.clean_bundle(
            fiber_groups[bundle]['sl'],
            return_idx=True)
        print(f"Afer cleaning: {len(new_fibers)} streamlines")

        idx_in_global = fiber_groups[bundle]['idx'][idx_in_bundle]
        np.save(f'{bundle}_idx.npy', idx_in_global)
        sft = StatefulTractogram(new_fibers.streamlines,
                                 img,
                                 Space.VOX)
        sft.to_rasmm()
        save_tractogram(sft, f'./{bundle}_afq.trk',
                        bbox_valid_check=False)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Cleaning fiber groups...
    Cleaning CST_R
    Before cleaning: 62 streamlines
    Afer cleaning: 59 streamlines
    Cleaning CST_L
    Before cleaning: 54 streamlines
    Afer cleaning: 49 streamlines
    Cleaning ARC_R
    Before cleaning: 49 streamlines
    Afer cleaning: 49 streamlines
    Cleaning ARC_L
    Before cleaning: 23 streamlines
    Afer cleaning: 23 streamlines




Bundle profiles
---------------
Streamlines are represented in the original diffusion space (`Space.VOX`) and
scalar properties along the length of each bundle are queried from this
scalar data. Here, the contribution of each streamline is weighted according
to how representative this streamline is of the bundle overall.


.. code-block:: default


    print("Extracting tract profiles...")
    for bundle in bundles:
        sft = load_tractogram(f'./{bundle}_afq.trk', img, to_space=Space.VOX)
        fig, ax = plt.subplots(1)
        weights = gaussian_weights(sft.streamlines)
        profile = afq_profile(FA_data, sft.streamlines,
                              np.eye(4), weights=weights)
        ax.plot(profile)
        ax.set_title(bundle)

    plt.show()




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /auto_examples/images/sphx_glr_plot_tract_profile_001.png
          :alt: CST_R
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_tract_profile_002.png
          :alt: CST_L
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_tract_profile_003.png
          :alt: ARC_R
          :class: sphx-glr-multi-img

    *

      .. image:: /auto_examples/images/sphx_glr_plot_tract_profile_004.png
          :alt: ARC_L
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting tract profiles...




References:
-------------------------
.. [Yeatman2012] Jason D Yeatman, Robert F Dougherty, Nathaniel J Myall,
                 Brian A Wandell, Heidi M Feldman, "Tract profiles of
                 white matter properties: automating fiber-tract
                 quantification", PloS One, 7: e49790

.. [Yeatman2014] Jason D Yeatman, Brian A Wandell, Aviv Mezer Feldman,
                 "Lifespan maturation and degeneration of human brain white
                 matter", Nature Communications 5: 4932


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  48.281 seconds)


.. _sphx_glr_download_auto_examples_plot_tract_profile.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_tract_profile.py <plot_tract_profile.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_tract_profile.ipynb <plot_tract_profile.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
